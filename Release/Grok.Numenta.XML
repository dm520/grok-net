<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Grok.Numenta</name>
    </assembly>
    <members>
        <member name="T:Grok.Numenta.APIClient">
             <summary>
             The APIClient class wraps a connection to the API server and
             provides helper methods to invoke the API.
            
             <h4>About REST</h4>
            
             <p>Many of the <code>APIClient</code> methods take a <code>url</code>
             parameter.  Don't worry!  First of all, there are helper methods that can
             bypass using URLs all together.  Second, if you prefer to use advanced
             REST functionality, you do not need to hunt down URLs or manually
             construct arcane query strings.  The URLs are provided to you be other
             API calls.</p>
            
             <p>For example, to create a model you would invoke <code>CreateModel()</code>,
             which takes a <code>url</code> parameter.  If you wish to create a model in a
             project, you could use <code>project.modelsUrl</code>.  Or, if you wish
             to skip using projects, you could use <code>user.modelsUrl</code>.</p>
            
             <h4>Example</h4>
            
             <p>The following example shows how to create a new <code>APIClient</code>
             and retrieve the default user account associated with the API key.</p>
            
             <pre><code>
             APIClient client = new APIClient(myApiKey);
             User user = client.DefaultUser;
             Console.Write("My name is " + user.firstName);
             </code></pre>
             </summary>
        </member>
        <member name="T:Grok.Numenta.IAPIClient">
            <summary>
            Interface for the API Client which allows us to be able to mock the API Client for testing purposes
            </summary>
        </member>
        <member name="M:Grok.Numenta.APIClient.#ctor(System.String)">
            <summary>
            Constructor taking the API Key of the User 
            </summary>
            <param name="UserAPIKey">The API Key to use</param>
        </member>
        <member name="M:Grok.Numenta.APIClient.#ctor(System.String,System.String)">
            <summary>
            Constructor taking the API Key of the User and a base URL (e.g.: https://api.groksolutions.com)
            </summary>
            <param name="UserAPIKey">The API Key to use</param>
            <param name="ConnectionURL">The API Server URL to use</param>
        </member>
        <member name="M:Grok.Numenta.APIClient.Get(System.String)">
            <summary>
            Makes an HTTP GET Call to the specified URL
            </summary>
            <param name="URL">Either an absolute or a relative URL</param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.APIClient.GetJSONObject(System.String)">
            <summary>
            Makes an HTTP GET Call to the specified URL to return some JSON
            </summary>
            <param name="URL"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.APIClient.PostJSONObject(System.String,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Makes an HTTP POST Call to the specified URL with an attached JSON object
            </summary>
            <param name="URL">Either an absolute or a relative URL</param>
            <param name="Data">JSON Data to post</param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.APIClient.Post(System.String,System.String)">
            <summary>
            Makes an HTTP POST Call to the specified URL with a payload, which is
            assumed to be in a JSON format
            </summary>
            <param name="URL">Either an absolute or a relative URL</param>
            <param name="Data"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.APIClient.DeleteJSONObject(System.String)">
            <summary>
            Deletes a resource at the specified URL.
            </summary>
            <param name="URL"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.APIClient.Delete(System.String)">
            <summary>
            Deletes the resource at the specified URL.
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.APIClient.RetrieveUsers">
            <summary>
            retrieves a list of users
            </summary>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.APIClient.InitDefaultUser">
            <summary>
            Initializes the default user.
            Typically, the API key will only have access to one user account.
            This method gets that user account.        
            </summary>
        </member>
        <member name="M:Grok.Numenta.APIClient.UpdateUser(Grok.Numenta.User)">
            <summary>
            The API expects a JSON Array, so we need to handle that appropriately before serializing
            </summary>
            <param name="SingleUser"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.APIClient.CreateProject(System.String,Grok.Numenta.Project)">
            <summary>
            Calls the API to create a new Project 
            </summary>
            <param name="URL"></param>
            <param name="NewProject"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.APIClient.CreateProject(Grok.Numenta.Project)">
             <summary>        
            Calls the API to create a new Project 
             </summary>
             <param name="NewProject"></param>
             <returns></returns>
        </member>
        <member name="M:Grok.Numenta.APIClient.CreateProject(System.String)">
            <summary>
            Calls the API to create a new Project 
            </summary>
            <param name="ProjectName"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.APIClient.RetrieveProjects">
            <summary>
            Calls the API to retrieve a list of Projects 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.APIClient.RetrieveProjects(System.String)">
            <summary>
            Calls the API to retrieve a list of Projects 
            </summary>
            <param name="URL"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.APIClient.RetrieveProject(System.String)">
            <summary>
            Calls the API to retrieve a specific Project
            </summary>
            <param name="URL"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.APIClient.RetrieveProject(Grok.Numenta.Project)">
            <summary>
            Calls the API to retrieve a specific Project
            </summary>
            <param name="CurrentProject"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.APIClient.DeleteProject(System.String)">
            <summary>
            Deletes the project at the specified URL
            </summary>
            <param name="URL"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.APIClient.DeleteProject(Grok.Numenta.Project)">
            <summary>
            Deletes the project 
            </summary>
            <param name="project"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.APIClient.CreateStream(System.String,Grok.Numenta.Stream)">
            <summary>
            Calls the API to create a Stream
            </summary>
            <param name="URL"></param>
            <param name="NewStream"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.APIClient.CreateStream(Grok.Numenta.Stream)">
            <summary>
            Calls the API to create a Stream
            </summary>
            <param name="NewStream"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.APIClient.RetrieveStreams(System.String)">
            <summary>
            Calls the API to retrieve a list of Streams
            </summary>
            <param name="URL"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.APIClient.RetrieveStream(System.String)">
            <summary>
            Calls the API to retrieve a specific Stream
            </summary>
            <param name="URL"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.APIClient.RetrieveStreamById(System.String)">
            <summary>
            Calls the API to retrieve a list of Streams
            </summary>
            <param name="StreamID"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.APIClient.AppendData(System.String,System.Collections.Generic.List{System.String[]},Grok.Numenta.UploadCallback)">
            <summary>
            Calls the API to append data to a Stream
            </summary>
            <param name="URL"></param>
            <param name="Data"></param>
            <param name="Callback"></param>
        </member>
        <member name="M:Grok.Numenta.APIClient.AppendData(System.String,System.Collections.Generic.List{System.String[]})">
            <summary>
            Calls the API to append data to a Stream
            </summary>
            <param name="URL"></param>
            <param name="Data"></param>
        </member>
        <member name="M:Grok.Numenta.APIClient.DeleteStream(System.String)">
            <summary>
            Deletes the Stream at the specified URL
            </summary>
            <param name="URL"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.APIClient.DeleteStream(Grok.Numenta.Stream)">
            <summary>
            Deletes the Stream 
            </summary>
            <param name="StreamToDelete"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.APIClient.RetrieveSwarm(System.String)">
            <summary>
            Calls the API to retrieve a specific Swarm
            </summary>
            <param name="URL"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.APIClient.CreateSwarm(System.String)">
            <summary>
            Calls the API to create a Swarm
            </summary>
            <param name="URL"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.APIClient.DeleteSwarm(System.String)">
            <summary>
            Deletes the Swarm at the specified URL
            </summary>
            <param name="URL"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.APIClient.DeleteSwarm(Grok.Numenta.Swarm)">
            <summary>
            Deletes the Swarm 
            </summary>
            <param name="SwarmToDelete"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.APIClient.SendModelCommand(System.String,System.String,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Calls the API to send a command for a Model
            </summary>
            <param name="URL"></param>
            <param name="Command"></param>
            <param name="Parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.APIClient.SendModelCommand(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Calls the API to send a command for a Model
            </summary>
            <param name="URL"></param>
            <param name="Command"></param>
            <param name="Parameterss"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.APIClient.SendModelCommand(System.String,System.String)">
            <summary>
            Calls the API to send a command for a Model
            </summary>
            <param name="URL"></param>
            <param name="Command"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.APIClient.SendModelCommand(Grok.Numenta.Model,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Calls the API to send a command for a Model
            </summary>
            <param name="CurrentModel"></param>
            <param name="Command"></param>
            <param name="Parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.APIClient.SendModelCommand(Grok.Numenta.Model,System.String)">
            <summary>
            Calls the API to send a command for a Model
            </summary>
            <param name="CurrentModel"></param>
            <param name="Command"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.APIClient.RetrieveOutputData(System.String)">
            <summary>
            Calls the API to retrieve output data for a Model
            </summary>
            <param name="URL"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.APIClient.CreateModel(System.String,Grok.Numenta.Model)">
            <summary>
            Calls the API to create a new Model
            </summary>
            <param name="URL"></param>
            <param name="NewModel"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.APIClient.CreateModel(Grok.Numenta.Model)">
            <summary>
            Calls the API to create a new Model
            </summary>
            <param name="NewModel"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.APIClient.RetrieveModels(System.String)">
            <summary>
            Calls the API to retrieve a list of Model
            </summary>
            <param name="URL"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.APIClient.RetrieveModel(System.String)">
            <summary>
            Calls the API to retrieve a specific Model
            </summary>
            <param name="URL"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.APIClient.RetrieveModelById(System.String)">
            <summary>
            Calls the API to retrieve a specific Model
            </summary>
            <param name="ID"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.APIClient.DeleteModel(System.String)">
            <summary>
            Deletes the Model at the specified URL
            </summary>
            <param name="URL"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.APIClient.DeleteModel(Grok.Numenta.Model)">
            <summary>
            Deletes the Model 
            </summary>
            <param name="ModelToDelete"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.APIClient.CloneModel(Grok.Numenta.Model)">
            <summary>
            Clone model based on the last checkpoint
            </summary>
            <param name="ModelToClone"></param>
            <returns></returns>
        </member>
        <member name="P:Grok.Numenta.APIClient.APIKey">
            <summary>
            Grok API Key 
            </summary>
        </member>
        <member name="P:Grok.Numenta.APIClient.DefaultUser">
             <summary>
            The default user object.
            For user account level activities, actions are performed on this account.
            It is initially populated with the first user account that the API key has access to.
            In the common case, this is the only user account for the API key.
             </summary>
        </member>
        <member name="P:Grok.Numenta.APIClient.VersionNumber">
            <summary>
            Current API Version
            </summary>
        </member>
        <member name="P:Grok.Numenta.APIClient.HTTPClient">
            <summary>
            HTTP Client used to send and receive HTTP requests
            </summary>
        </member>
        <member name="P:Grok.Numenta.APIClient.Retry">
            <summary>
            Number of times to try to connect to the API server in case of server error (500) 
            or connection timeout error before throwing an exception.
            Default value: 2
            </summary>
        </member>
        <member name="P:Grok.Numenta.APIClient.RetryAter">
            <summary>
            The number of seconds to wait between retries.
            Default value: 10
            </summary>
        </member>
        <member name="P:Grok.Numenta.APIClient.Timeout">
            <summary>
            Number of seconds to wait for the API server response.
            </summary>
        </member>
        <member name="T:Grok.Numenta.APIException">
            <summary>
            The APIException class represents an error encountered when trying to execute an API command. 
            In the common case, these errors will only occur as a result of bad requests, 
            such as malformed inputs or referencing non-existent entities.
            </summary>
        </member>
        <member name="T:Grok.Numenta.DataSource">
             <summary>    
            Represents a DataSource in a Stream.
             </summary>
        </member>
        <member name="F:Grok.Numenta.DataSource.TYPE_LOCAL">
            A "local" data source represents direct input into the stream.
            A stream must have one and only one local data source.
        </member>
        <member name="F:Grok.Numenta.DataSource.TYPE_PUBLIC">
            A "public" data source represents one of the public data providers.
            A stream can optionally have many data sources.
        </member>
        <member name="M:Grok.Numenta.DataSource.#ctor">
            <summary>        
            Default Constructor
            </summary>
        </member>
        <member name="M:Grok.Numenta.DataSource.#ctor(System.String)">
            <summary>        
            Creates a new LOCAL DataSource with the given name
            </summary>
            <param name="Name"></param>
        </member>
        <member name="M:Grok.Numenta.DataSource.#ctor(System.String,System.String)">
            <summary>        
            Creates a new DataSource with the given name and Type
            </summary>
            <param name="strName"></param>
            <param name="strDataSourceType"></param>
        </member>
        <member name="M:Grok.Numenta.DataSource.#ctor(Grok.Numenta.IAPIClient,Newtonsoft.Json.Linq.JObject)">
            <summary>        
            Creates a new DataSource from a given JSON Object (e.g.: from the API)
            </summary>
            <param name="client"></param>
            <param name="JSONObject"></param>
        </member>
        <member name="M:Grok.Numenta.DataSource.ToJSON">
             <summary>        
            Serializes the DataSource as JSON for use with the API
             </summary>
             <returns></returns>
        </member>
        <member name="T:Grok.Numenta.DataSourceField">
            <summary>    
            Represents a single field in the DataSources of a Stream.
            </summary>
        </member>
        <member name="M:Grok.Numenta.DataSourceField.#ctor">
            <summary>        
            Default Constructor
            </summary>
        </member>
        <member name="M:Grok.Numenta.DataSourceField.#ctor(System.String)">
            <summary>        
            Constructor for a new SCALAR field
            </summary>
            <param name="Name"></param>
        </member>
        <member name="M:Grok.Numenta.DataSourceField.#ctor(System.String,System.String)">
            <summary>        
            Constructor for a new field
            </summary>
            <param name="Name"></param>
            <param name="DataType"></param>
        </member>
        <member name="M:Grok.Numenta.DataSourceField.#ctor(System.String,System.String,System.String)">
            <summary>        
            Constructor for a new field with a Flag
            </summary>
            <param name="Name"></param>
            <param name="DataType"></param>
            <param name="flag"></param>
        </member>
        <member name="M:Grok.Numenta.DataSourceField.#ctor(System.String,System.Double,System.Double)">
            <summary>        
            Constructor for a new SCALAR field with MIN and MAX values
            </summary>
            <param name="Name"></param>
            <param name="Min"></param>
            <param name="Max"></param>
        </member>
        <member name="M:Grok.Numenta.DataSourceField.#ctor(Newtonsoft.Json.Linq.JObject)">
            <summary>        
            Constructor for a new DataSourceField from a JSON Object (e.g.: from the API)
            </summary>
            <param name="JSONObject"></param>
        </member>
        <member name="M:Grok.Numenta.DataSourceField.ToJSON">
            <summary>        
            Returns a JSON representation of a DataSourceField for use in the API
            </summary>
            <returns></returns>
        </member>
        <member name="T:Grok.Numenta.DataTable">
            <summary>    
            Represents a Grok DataTable as returned in the /data feeds
            </summary>
        </member>
        <member name="M:Grok.Numenta.DataTable.#ctor(Newtonsoft.Json.Linq.JObject)">
            <summary>        
            Constructor that takes a JSON Object representing a DataTable
            </summary>
            <param name="JSONObject"></param>
        </member>
        <member name="M:Grok.Numenta.DataTable.#ctor(System.IO.FileInfo)">
            <summary>        
            Creates a new DataTable based on a CSV File
            </summary>
            <param name="InputFile"></param>
        </member>
        <member name="M:Grok.Numenta.DataTable.#ctor(System.IO.FileInfo,System.Boolean)">
            <summary>        
            Creates a new DataTable based on a CSV File
            </summary>
            <param name="InputFile"></param>
            <param name="HasHeaders"></param>
        </member>
        <member name="M:Grok.Numenta.DataTable.#ctor(System.IO.FileInfo,System.Boolean,System.Int32)">
            <summary>
            
            Creates a new DataTable based on a CSV File
            </summary>
            <param name="InputFile"></param>
            <param name="HasHeaders"></param>
            <param name="MaxRows"></param>
        </member>
        <member name="M:Grok.Numenta.DataTable.#ctor(System.IO.FileInfo,System.Boolean,System.Int32,System.Int32)">
            <summary>        
            Creates a new DataTable based on a CSV File
            </summary>
            <param name="InputFile"></param>
            <param name="HasHeaders"></param>
            <param name="MaxRows"></param>
            <param name="SkipRows"></param>
        </member>
        <member name="M:Grok.Numenta.DataTable.#ctor(System.String[][])">
            <summary>        
            Creates a new DataTable based on a 2-D string array
            </summary>
            <param name="InputData"></param>
        </member>
        <member name="M:Grok.Numenta.DataTable.#ctor">
            <summary>        
            Creates an empty data table
            </summary>
        </member>
        <member name="M:Grok.Numenta.DataTable.GetLastRowId">
            <summary>        
            Gets the last row's ID.
            Note: This assumes the Grok output format, where the first column is an integer identifier.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.DataTable.WriteCSV(System.IO.FileInfo)">
            <summary>        
            Writes the data table out to the specified file in CSV format.
            </summary>
            <param name="OutputFile"></param>
        </member>
        <member name="P:Grok.Numenta.DataTable.Item(System.String)">
            <summary>        
            Returns a List representing a data column for the index of a specific key value
            </summary>
            <param name="Key"></param>
            <returns></returns>
        </member>
        <member name="P:Grok.Numenta.DataTable.Item(System.Int32)">
            <summary>        
            Returns a List representing a data column for the index
            </summary>
            <param name="Index"></param>
            <returns></returns>
        </member>
        <member name="P:Grok.Numenta.DataTable.TimestampIndex">
            <summary>
            Contains the index of the field representing time for this DataTable. 
            </summary>
        </member>
        <member name="P:Grok.Numenta.DataTable.PredictionFieldIndex">
            <summary>
            Contains the index of the field representing the Predicted Field Prediction value for this DataTable
            </summary>
        </member>
        <member name="P:Grok.Numenta.DataTable.PredictedFieldIndex">
            <summary>
            Contains the index of the field representing the Predicted Field Actual value for this DataTable
            </summary>
        </member>
        <member name="P:Grok.Numenta.DataTable.AnomalyScoreFieldIndex">
            <summary>
            Contains the index of the field representing the anomaly score for this DataTable
            </summary>
        </member>
        <member name="T:Grok.Numenta.Model">
            <summary>    
            Represents a Grok Model
            </summary>
        </member>
        <member name="M:Grok.Numenta.Model.SetComputeInterval(System.Int32,Grok.Numenta.Model.ComputeInterval)">
            <summary>
            Defines the interval at which Grok will to make predictions.
            
            This is closely tied to aggregation interval. If you have input records
            every 15 minutes, and aggregate hourly, by default you will get a
            prediction every four records you send in. If you only need a prediction
            every 4 hours you would set a compute interval of four hours and you
            would then get one prediction for every 16 records you sent in.
            interval = {'hours': 4}
            </summary>
            <param name="value"></param>
            <param name="interval">ComputeInterval enumeration</param>
        </member>
        <member name="M:Grok.Numenta.Model.CreateModel(Grok.Numenta.IAPIClient,Newtonsoft.Json.Linq.JObject)">
            <summary>        
            Creates a Model from a JSON Object (e.g.: from the API)
            </summary>
            <param name="Client"></param>
            <param name="JSONObject"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.Model.#ctor">
            <summary>
            Create a prediction model
            </summary>
        </member>
        <member name="M:Grok.Numenta.Model.#ctor(System.String)">
            <summary>
            Creates a model
            </summary>
            <param name="type">TYPE_ANOMALY or TYPE_PREDICTOR</param>
        </member>
        <member name="M:Grok.Numenta.Model.SetAnomalyThreshold(System.Double)">
            <summary>
            This method sets the threshold used for automatic classification. 
            If different from current setting, it will recalculate all classifications within the anomaly cache. 
            If it is set above 1.0, it will not classify anything.  
            </summary>
            <param name="threshold">the value to set the automatic classification threshold to</param>
        </member>
        <member name="M:Grok.Numenta.Model.GetAnomalyThreshold">
            <summary>
            This method returns the threshold used for automatic classification
            </summary>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.Model.SetAutoDetectWaitRecords(System.Int32)">
            <summary>
            This property specifies the number of records to wait until the model
            begins to automatically flag anomalies above the threshold. 
            This allows the model to wait until after the initial learning is done and
            the anomaly scores settle down.
            This defaults to the number of post-aggregated records in the stream at the start of the swarm
            </summary>
        </member>
        <member name="M:Grok.Numenta.Model.GetAutoDetectWaitRecords">
            <summary>
            This property specifies the number of records to wait until the model
            begins to automatically flag anomalies above the threshold. 
            This allows the model to wait until after the initial learning is done and
            the anomaly scores settle down.
            This defaults to the number of post-aggregated records in the stream at the start of the swarm
            </summary>
        </member>
        <member name="M:Grok.Numenta.Model.AddLabel(System.Int32,System.Int32,System.String)">
            <summary>
            This method adds the label ‘labelName’ to each point within the range [startRecord, endRecord].
            </summary>
            <param name="startRecord"></param>
            <param name="endRecord"></param>
            <param name="labelName"></param>
        </member>
        <member name="M:Grok.Numenta.Model.GetLabels(System.Int32,System.Int32)">
            <summary>
            This method returns the labels of a range of records. 
            </summary>
            <param name="startRecord"></param>
            <param name="endRecord"></param>
            <returns>
            A dictionary mapping each record to a list of labels associated with that record
            or an empty dictionary if the model is still re-processing the newly added labels.
            </returns>
        </member>
        <member name="M:Grok.Numenta.Model.RemoveLabels(System.Int32,System.Int32,System.String)">
            <summary>
            This method removes labels from a range of records
            </summary>
            <param name="startRecord"></param>
            <param name="endRecord"></param>
            <param name="labelFilter"></param>
        </member>
        <member name="M:Grok.Numenta.Model.CreateSwarm">
            <summary>        
            Creates a Swarm for the Model
            </summary>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.Model.SwarmModel(Newtonsoft.Json.Linq.JObject)">
            <summary>        
            Sends a command to the API to start swarming the model and return the given Swarm
            </summary>
            <param name="ParamsToSwarmOn"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.Model.SwarmModel(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>        
            Sends a command to the API to start swarming the model and return the given Swarm
            </summary>
            <param name="ParamsToSwarmOn"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.Model.SwarmModel(System.String)">
            <summary>        
            Sends a command to the API to start swarming the model and return the given Swarm
            </summary>
            <param name="SwarmSize"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.Model.SwarmModel">
            <summary>        
            Sends a command to the API to start swarming the model and return the given Swarm
            </summary>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.Model.Promote">
            <summary>        
            Sends a command to the API to Promote the Model
            </summary>
        </member>
        <member name="M:Grok.Numenta.Model.Promote(System.Boolean)">
            <summary>        
            Sends a command to the API to Promote the Model
            </summary>
            <param name="verbose"></param>
        </member>
        <member name="M:Grok.Numenta.Model.StartPromote">
            <summary>        
            Sends a command to the API to Promote the Model
            </summary>
        </member>
        <member name="M:Grok.Numenta.Model.Start">
            <summary>        
            Sends a command to the API to Start the Model
            </summary>
        </member>
        <member name="M:Grok.Numenta.Model.Stop">
            <summary>
            Sends a command to Stop the model
            </summary>
        </member>
        <member name="M:Grok.Numenta.Model.Clone">
            <summary>
            Clone model based on the last checkpoint
            </summary>
            <returns>Cloned Model</returns>
        </member>
        <member name="M:Grok.Numenta.Model.DisableLearning">
            <summary>        
            Sends a command to the API to Disable Learning in the Model
            </summary>
        </member>
        <member name="M:Grok.Numenta.Model.EnableLearning">
            <summary>        
            Sends a command to the API to enable learning in the Model
            </summary>
        </member>
        <member name="M:Grok.Numenta.Model.WaitForStatus(System.String)">
            <summary>        
            Pauses execution until the Model reaches a given status
            </summary>
            <param name="Status"></param>
        </member>
        <member name="M:Grok.Numenta.Model.WaitForStatus(System.String,System.Boolean)">
            <summary>        
            Pauses execution until the Model reaches a given status
            </summary>
            <param name="Status"></param>
            <param name="Verbose"></param>
        </member>
        <member name="M:Grok.Numenta.Model.WaitForRowId(System.Int32)">
            <summary>        
            Pauses execution until the Model reaches a given Row ID
            </summary>
            <param name="RowId"></param>
        </member>
        <member name="M:Grok.Numenta.Model.WaitForRowId(System.Int32,System.Boolean)">
            <summary>        
            Pauses execution until the Model reaches a given Row ID
            </summary>
            <param name="RowId"></param>
            <param name="Verbose"></param>
        </member>
        <member name="M:Grok.Numenta.Model.WaitForStabilization">
            <summary>        
            Pauses execution until the Model fully stabilizes
            </summary>
        </member>
        <member name="M:Grok.Numenta.Model.WaitForStabilization(System.Boolean)">
            <summary>        
            Pauses execution until the Model fully stabilizes
            </summary>
            <param name="Verbose"></param>
        </member>
        <member name="M:Grok.Numenta.Model.RetrieveData">
            <summary>        
            Retrieves the data from the Model
            </summary>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.Model.RetrieveData(System.Int32)">
            <summary>        
            Retrieves the data from the Model, limiting the ouptut to a specified number of rows
            </summary>
            <param name="Limit"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.Model.RetrieveData(System.Boolean)">
            <summary>        
            Retrieves the data from the Model, shifting the output to have the predictions line up with the Actual values
            </summary>
            <param name="shift"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.Model.RetrieveData(System.Int32,System.Boolean)">
            <summary>        
            Retrieves the data from the Model, limiting the output and shifting the predictions to line up with the actuals
            </summary>
            <param name="Limit"></param>
            <param name="Shift"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.Model.RetrieveData(System.Int32,System.Int32,System.Boolean)">
            <summary>        
            Retrieves the data from the Model, limiting the output and shifting the predictions to line up with the actuals, and starting from a specific Row ID (Offset)
            </summary>
            <param name="Offset"></param>
            <param name="Limit"></param>
            <param name="Shift"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.Model.BuildDataUrl(System.Int32,System.Int32,System.Boolean)">
            <summary>        
            Builds the Model Data URL from the model URL given the specified inputs
            </summary>
            <param name="Offset"></param>
            <param name="Limit"></param>
            <param name="Shift"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.Model.ToJSON">
            <summary>        
            Serialize the Model to JSON for use in the API
            </summary>
            <returns></returns>
        </member>
        <member name="P:Grok.Numenta.Model.isLearning">
            <summary>
            Whether or not the model is learning from new data
            </summary>
            <returns></returns>
        </member>
        <member name="P:Grok.Numenta.Model.predictionSteps">
            <summary>
            NOTE: This needs to be instantiated before setting; if it gets set to an empty value,
            then the JSON representation will be invalid, causing an HTTP error when creating
            a Model.  Therefore, it needs to be instantiated locally.
            </summary>
        </member>
        <member name="P:Grok.Numenta.Model.customErrorMetric">
            <summary>
            NOTE: This needs to be instantiated before setting; if it gets set to an empty value,
            then the JSON representation will be invalid, causing an HTTP error when creating
            a Model.  Therefore, it needs to be instantiated locally.
            </summary>
        </member>
        <member name="T:Grok.Numenta.Project">
            <summary>    
            The Project class represents the Project object in the API, a logical 
            means of grouping Models and Streams within a User account.
            </summary>
        </member>
        <member name="M:Grok.Numenta.Project.CreateStream(Grok.Numenta.Stream)">
            <summary>        
            Calls out to the API to create a new Stream in the Project from a given Stream object
            </summary>
            <param name="NewStream"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.Project.RetrieveStreams">
            <summary>        
            Calls out to the API to retrieve a list of Streams in the Project
            </summary>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.Project.CreateModel(Grok.Numenta.Model)">
            <summary>        
            Calls out to the API to create a new Model in the Project from a given Model object
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.Project.RetrieveModels">
            <summary>        
            Calls out to the API to retrieve a list of Models in the Project
            </summary>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.Project.CreateProject(Grok.Numenta.IAPIClient,Newtonsoft.Json.Linq.JObject)">
            <summary>        
            Create a Project locally from a JSON representation (e.g.: as retrieved from the API)
            </summary>
            <param name="Client"></param>
            <param name="JSONObject"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.Project.ToJSON">
            <summary>        
            Serialize the project object, wrapping it in a "project" group
            </summary>
            <returns></returns>
        </member>
        <member name="T:Grok.Numenta.Stream">
            <summary>    
            The Stream class represents a Stream.
            It can be used to perform basic retrieval and update operations.
            </summary>
        </member>
        <member name="M:Grok.Numenta.Stream.CreateStream(Grok.Numenta.IAPIClient,Newtonsoft.Json.Linq.JObject)">
            <summary>        
            Create a Stream locally from a JSON Object
            </summary>
            <param name="Client"></param>
            <param name="JSONObject"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.Stream.ToJSON">
            <summary>        
            Serialize the project object, wrapping it in a "stream" group
            </summary>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.Stream.AppendData(System.Collections.Generic.List{System.String[]})">
            <summary>        
            Append data records to an existing Stream
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Grok.Numenta.Stream.AppendData(System.Collections.Generic.List{System.String[]},Grok.Numenta.UploadCallback)">
            <summary>        
            Append data records to an existing Stream
            </summary>
            <param name="data"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Grok.Numenta.Stream.AppendData(Grok.Numenta.DataTable)">
            <summary>        
            Append data records to an existing Stream
            </summary>
            <param name="NewData"></param>
        </member>
        <member name="M:Grok.Numenta.Stream.AppendData(Grok.Numenta.DataTable,Grok.Numenta.UploadCallback)">
            <summary>        
            Append data records to an existing Stream
            </summary>
            <param name="NewData"></param>
            <param name="callback"></param>
        </member>
        <member name="T:Grok.Numenta.Swarm">
            <summary>    
            The Swarm class represents a Swarm.
            It can be used to perform basic retrieval and update operations.
            </summary>
        </member>
        <member name="M:Grok.Numenta.Swarm.#ctor">
            <summary>        
            Default Constructor
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Grok.Numenta.Swarm.CreateSwarm(Grok.Numenta.IAPIClient,Newtonsoft.Json.Linq.JObject)" -->
        <!-- Badly formed XML comment ignored for member "M:Grok.Numenta.Swarm.Retrieve" -->
        <member name="P:Grok.Numenta.Swarm.Expires">
            <summary>
            While the swarn is running, return the number of seconds to wait before
            checking if the swarm process is complete. Default value:0
            </summary>
        </member>
        <member name="T:Grok.Numenta.TimeAggregation">
            <summary>    
            The TimeAggregation class represents the Aggregation used in a given Model.
            </summary>
        </member>
        <member name="F:Grok.Numenta.TimeAggregation.INTERVAL_SECONDS">
            Aggregates input data into buckets of one second intervals.
        </member>
        <member name="F:Grok.Numenta.TimeAggregation.INTERVAL_MINUTES">
            Aggregates input data into buckets of one minute intervals.
        </member>
        <member name="F:Grok.Numenta.TimeAggregation.INTERVAL_HOURS">
            Aggregates input data into buckets of one hour intervals.
        </member>
        <member name="F:Grok.Numenta.TimeAggregation.INTERVAL_DAYS">
            Aggregates input data into buckets of one day intervals.
        </member>
        <member name="F:Grok.Numenta.TimeAggregation.INTERVAL_WEEKS">
            Aggregates input data into buckets of one week intervals.
        </member>
        <member name="F:Grok.Numenta.TimeAggregation.INTERVAL_MONTHS">
            Aggregates input data into buckets of one month intervals.
        </member>
        <member name="F:Grok.Numenta.TimeAggregation.FUNCTION_SUM">
            Aggregates input data using the sum of all values during
            the interval.  This function can only be used with
            <code>SCALAR</code> fields.
        </member>
        <member name="F:Grok.Numenta.TimeAggregation.FUNCTION_MEAN">
            Aggregates input data using the average/mean of all values
            during the interval.  This function can only be used with
            <code>SCALAR</code> fields.
        </member>
        <member name="F:Grok.Numenta.TimeAggregation.FUNCTION_FIRST">
            Aggregates input data using the first value during the interval.
        </member>
        <member name="F:Grok.Numenta.TimeAggregation.FUNCTION_LAST">
            Aggregates input data using the last value during the interval.
        </member>
        <member name="F:Grok.Numenta.TimeAggregation.FUNCTION_MIN">
            Aggregates input data using the minimum value during the interval.
        </member>
        <member name="F:Grok.Numenta.TimeAggregation.FUNCTION_MAX">
            Aggregates input data using the maximum value during the interval.
        </member>
        <member name="M:Grok.Numenta.TimeAggregation.GetSeconds">
            <summary>        
            Returns the number of seconds in the aggregation interval.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.TimeAggregation.SetSeconds(System.Int32)">
            <summary>        
            Sets the number of seconds in the aggregation interval.
            </summary>
            <param name="seconds"></param>
        </member>
        <member name="M:Grok.Numenta.TimeAggregation.GetMinutes">
            <summary>        
            Returns the number of minutes in the aggregation interval.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.TimeAggregation.SetMinutes(System.Int32)">
            <summary>        
            Sets the number of minutes in the aggregation interval.
            </summary>
            <param name="minutes"></param>
        </member>
        <member name="M:Grok.Numenta.TimeAggregation.GetHours">
            <summary>        
            Returns the number of hours in the aggregation interval.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.TimeAggregation.SetHours(System.Int32)">
            <summary>        
            Sets the number of hours in the aggregation interval.
            </summary>
            <param name="hours"></param>
        </member>
        <member name="M:Grok.Numenta.TimeAggregation.GetDays">
            <summary>        
            Returns the number of days in the aggregation interval.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.TimeAggregation.SetDays(System.Int32)">
            <summary>        
            Sets the number of days in the aggregation interval.
            </summary>
            <param name="days"></param>
        </member>
        <member name="M:Grok.Numenta.TimeAggregation.GetWeeks">
            <summary>        
            Returns the number of weeks in the aggregation interval.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.TimeAggregation.SetWeeks(System.Int32)">
            <summary>        
            Returns the number of weeks in the aggregation interval.
            </summary>
            <param name="weeks"></param>
        </member>
        <member name="M:Grok.Numenta.TimeAggregation.GetMonths">
            <summary>        
            Returns the number of months in the aggregation interval.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.TimeAggregation.SetMonths(System.Int32)">
            <summary>        
            Sets the number of months in the aggregation interval.
            </summary>
            <param name="months"></param>
        </member>
        <member name="M:Grok.Numenta.TimeAggregation.GetUnits(System.String)">
            <summary>        
            Private method to return a specific unit of aggregation from the dictionary
            </summary>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.TimeAggregation.SetUnits(System.String,System.Int32)">
            <summary>        
            Private method to set a specific unit of aggregation from the dictionary
            </summary>
            <param name="Name"></param>
            <param name="Value"></param>
        </member>
        <member name="M:Grok.Numenta.TimeAggregation.#ctor">
            <summary>        
            Default constructor
            </summary>
        </member>
        <member name="M:Grok.Numenta.TimeAggregation.#ctor(System.String)">
            <summary>        
            Constructor that takes an Interval string (e.g.: hours) and creates a new window of a single unit.
            </summary>
            <param name="Interval"></param>
        </member>
        <member name="M:Grok.Numenta.TimeAggregation.#ctor(Newtonsoft.Json.Linq.JObject)">
            <summary>        
            Constructor that takes a JSON representation (i.e.: from the REST API) and creates a code representation of the
            aggregation settings.
            </summary>
            <param name="JSONObject"></param>
        </member>
        <member name="M:Grok.Numenta.TimeAggregation.ToJSON">
            <summary>        
            Returns a JSON representation of the Time Aggregation
            </summary>
            <returns>A JSON Representation of the Time Aggregation that can be fed into the Grok REST API</returns>
        </member>
        <member name="P:Grok.Numenta.TimeAggregation.interval">
            <summary>        
            Accessor methods to set and retrieve the aggregation interval
            </summary>
        </member>
        <member name="P:Grok.Numenta.TimeAggregation.FieldOverrides">
            <summary>        
            Accessor method to set and retrieve the aggregation field overrides
            </summary>
        </member>
        <member name="T:Grok.Numenta.UploadEvent">
            <summary>    
            Event to call during Upload to track the progress of the upload
            </summary>
        </member>
        <member name="M:Grok.Numenta.UploadEvent.ToString">
            <summary>        
            Returns a string representation of the upload percentage
            </summary>
            <returns></returns>
        </member>
        <member name="T:Grok.Numenta.User">
            <summary>    
            The User class represents a user account.
            It can be used to perform basic retrieval and update operations.
            Every valid API key is associated with at least one user account.
            </summary>
        </member>
        <member name="M:Grok.Numenta.User.CreateUser(Grok.Numenta.IAPIClient,Newtonsoft.Json.Linq.JObject)">
            <summary>        
            Creates a new user based on API client and JSON representation.
            This constructor is intended to be used only be the API client directly.
            </summary>
            <param name="Client"></param>
            <param name="JSONObject"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.User.Update">
            <summary>        
            Calls into the API to update the User record
            </summary>
        </member>
        <member name="M:Grok.Numenta.User.ToJSON">
            <summary>        
            Returns a JSON representation of the User
            </summary>
            <returns>A JSON Representation of the User that can be fed into the Grok REST API</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Grok.Numenta.User.CreateProject(Grok.Numenta.Project)" -->
        <member name="M:Grok.Numenta.User.CreateProject(System.String)">
            <summary>        
            Create an empty Project with the given name
            </summary>
            <param name="ProjectName"></param>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.User.RetrieveProjects">
            <summary>        
            Calls into the API to return the list of Projects for a User account
            </summary>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.User.RetrieveStreams">
            <summary>        
            Calls into the API to retrieve a list of Streams for the User account that are not associated to Projects
            </summary>
            <returns></returns>
        </member>
        <member name="M:Grok.Numenta.User.RetrieveAllStreams">
            <summary>        
            Calls into the API to retrieve a list of Streams for the User account, irrespective of association to Projects
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
